
## our overarching VC interface that acts agnostic of our proof type
interface VerifiableCredential
  @createModel(description: "A verifiable credential interface")
{
  controller: DID! @documentAccount
  issuer: Issuer! 
  context: [String!]! @string(maxLength: 1000) @list(maxLength: 100)
  type: [String!]! @string(maxLength: 1000) @list(maxLength: 100)
  credentialSchema: CredentialSchema!
  credentialStatus: CredentialStatus
  issuanceDate: DateTime!
  expirationDate: DateTime
}

type Issuer {
  id: String! @string(maxLength: 1000)
  name: String @string(maxLength: 1000)
}

type CredentialStatus {
  id: String! @string(maxLength: 1000)
  type: String! @string(maxLength: 1000)
}

type CredentialSchema {
  id: String! @string(maxLength: 1000)
  type: String! @string(maxLength: 1000)
}

## we'll use interfaces for our proof types to generalize them as well - this one's for EIP712
interface VCEIP712Proof implements VerifiableCredential
  @createModel(description: "A verifiable credential interface of type EIP712")
{
  controller: DID! @documentAccount
  issuer: Issuer! 
  context: [String!]! @string(maxLength: 1000) @list(maxLength: 100)
  type: [String!]! @string(maxLength: 1000) @list(maxLength: 100)
  credentialSchema: CredentialSchema!
  credentialStatus: CredentialStatus
  issuanceDate: DateTime!
  expirationDate: DateTime
  proof: ProofEIP712!
}

## generalized JWT proof interface
interface VCJWTProof implements VerifiableCredential
  @createModel(description: "A verifiable credential interface of type JWT")
{
  controller: DID! @documentAccount
  issuer: Issuer! 
  context: [String!]! @string(maxLength: 1000) @list(maxLength: 100)
  type: [String!]! @string(maxLength: 1000) @list(maxLength: 100)
  credentialSchema: CredentialSchema!
  credentialStatus: CredentialStatus
  issuanceDate: DateTime!
  expirationDate: DateTime
  proof: ProofJWT!
}

type ProofEIP712 {
  verificationMethod: String! @string(maxLength: 1000)
  created: DateTime! 
  proofPurpose: String! @string(maxLength: 1000)
  type: String! @string(maxLength: 1000)
  proofValue: String! @string(maxLength: 1000)
  eip712: EIP712!
}

type ProofJWT {
  type: String! @string(maxLength: 1000)
  jwt: String! @string(maxLength: 100000)
}

type EIP712 {
    domain: Domain! 
    types: ProofTypes!
    primaryType: String! @string(maxLength: 100)
}

type Types {
  name: String! @string(maxLength: 100)
  type: String! @string(maxLength: 100)
}

type ProofTypes {
    EIP712Domain: [Types!]! @list(maxLength: 100)
    CredentialSchema: [Types!]! @list(maxLength: 100)
    CredentialSubject: [Types!]! @list(maxLength: 100)
    Proof: [Types!]! @list(maxLength: 100)
    VerifiableCredential: [Types!]! @list(maxLength: 100)
}

type Domain {
  chainId: Int!
  name: String! @string(maxLength: 100)
  version: String! @string(maxLength: 100)
}

################## Account Trust Credentials

type AccountTrustTypes {
  type: String! @string(maxLength: 100)
  scope: String! @string(maxLength: 100)
  level: String @string(maxLength: 100)
  reason: [String] @string(maxLength: 100) @list(maxLength: 100)
}

type AccountTrustSubject
{
  id: DID! @accountReference
  trustworthiness: [AccountTrustTypes!]! @list(maxLength: 100)
}

interface AccountTrustCredential implements VerifiableCredential  
  @createModel(description: "A verifiable credential interface for account trust credentials")
{
  controller: DID! @documentAccount
  issuer: Issuer! 
  context: [String!]! @string(maxLength: 1000) @list(maxLength: 100)
  type: [String!]! @string(maxLength: 1000) @list(maxLength: 100)
  credentialSchema: CredentialSchema!
  credentialStatus: CredentialStatus
  issuanceDate: DateTime!
  expirationDate: DateTime
  credentialSubject: AccountTrustSubject! 
}

## EIP712 for Account Trust Credentials
## Will require SET accountRelation to recipient field
### Will NOT require field locking - we assume that the issuer might want to update assertions in the future
type AccountTrustCredential712 implements VerifiableCredential & AccountTrustCredential & VCEIP712Proof 
  @createModel(accountRelation: LIST, description: "A verifiable credential of type EIP712 for account trust credentials")
  @createIndex(fields: [{ path: "issuanceDate" }])
  @createIndex(fields: [{ path: "trusted" }]) {
  controller: DID! @documentAccount
  issuer: Issuer! 
  context: [String!]! @string(maxLength: 1000) @list(maxLength: 100)
  type: [String!]! @string(maxLength: 1000) @list(maxLength: 100)
  credentialSchema: CredentialSchema!
  credentialStatus: CredentialStatus
  issuanceDate: DateTime!
  expirationDate: DateTime
  credentialSubject: AccountTrustSubject! 
  trusted: Boolean!
  recipient: DID! @accountReference
  proof: ProofEIP712!
}

## define our JWT type that uses a hard-coded credentialSubject specific to our use case
## Will require SET accountRelation to recipient field
### Will NOT require field locking - we assume that the issuer might want to update assertions in the future
type AccountTrustCredentialJWT implements VerifiableCredential & AccountTrustCredential & VCJWTProof 
  @createModel(accountRelation: LIST, description: "A verifiable credential of type JWT for account trust credentials")
  @createIndex(fields: [{ path: "issuanceDate" }])
  @createIndex(fields: [{ path: "trusted" }]) {
  controller: DID! @documentAccount
  issuer: Issuer! 
  context: [String!]! @string(maxLength: 1000) @list(maxLength: 100)
  type: [String!]! @string(maxLength: 1000) @list(maxLength: 100)
  credentialSchema: CredentialSchema!
  credentialStatus: CredentialStatus
  issuanceDate: DateTime!
  expirationDate: DateTime
  credentialSubject: AccountTrustSubject! 
  trusted: Boolean!
  recipient: DID! @accountReference
  proof: ProofJWT!
}

##################

################## Software Security Credentials

enum Result {
  NONE
  LOW
  MEDIUM
  CRITICAL
}

type Findings {
  criticality: Result!
  description: String! @string(maxLength: 1000)
}

type SecurityReview {
  result: Result!
  findings: [Findings!]! @list(maxLength: 100)
  reportURI: URI
}

# id is set to CID type
type SecuritySubject
{
  id: CID! 
  securityReview: SecurityReview!
}

interface SoftwareSecurityCredential implements VerifiableCredential 
  @createModel(description: "A verifiable credential interface for software security credentials") {
  controller: DID! @documentAccount
  issuer: Issuer! 
  context: [String!]! @string(maxLength: 1000) @list(maxLength: 100)
  type: [String!]! @string(maxLength: 1000) @list(maxLength: 100)
  credentialSchema: CredentialSchema!
  credentialStatus: CredentialStatus
  issuanceDate: DateTime!
  expirationDate: DateTime
  credentialSubject: SecuritySubject! 
}

# EIP712 for Security Review Credentials
# Will require SET accountRelation to recipient field
## Will require field locking - we don't want the issuer to be able to update the assertions
### Ideally we would have ability to apply filter on reviewType Enum
type SoftwareSecurityCredential712 implements VerifiableCredential & SoftwareSecurityCredential & VCEIP712Proof 
  @createModel(accountRelation: LIST, description: "A verifiable credential of type EIP712 for software security credentials")
  @createIndex(fields: [{ path: "issuanceDate" }])
  @createIndex(fields: [{ path: "softwareItemLocation" }]) {
  controller: DID! @documentAccount
  issuer: Issuer! 
  context: [String!]! @string(maxLength: 1000) @list(maxLength: 100)
  type: [String!]! @string(maxLength: 1000) @list(maxLength: 100)
  credentialSchema: CredentialSchema!
  credentialStatus: CredentialStatus
  issuanceDate: DateTime!
  expirationDate: DateTime
  credentialSubject: SecuritySubject! 
  reviewType: Result!
  softwareItemLocation: CID! 
  proof: ProofEIP712!
}

## define our JWT type that uses a hard-coded credentialSubject specific to our use case
## Will require SET accountRelation to recipient field
### Will require field locking - we don't want the issuer to be able to update the assertions
### Ideally we would have ability to apply filter on reviewType Enum
type SoftwareSecurityCredentialJWT implements VerifiableCredential & SoftwareSecurityCredential & VCJWTProof 
  @createModel(accountRelation: LIST, description: "A verifiable credential of type JWT for software security credentials")
  @createIndex(fields: [{ path: "issuanceDate" }])
  @createIndex(fields: [{ path: "softwareItemLocation" }]) {
  controller: DID! @documentAccount
  issuer: Issuer! 
  context: [String!]! @string(maxLength: 1000) @list(maxLength: 100)
  type: [String!]! @string(maxLength: 1000) @list(maxLength: 100)
  credentialSchema: CredentialSchema!
  credentialStatus: CredentialStatus
  issuanceDate: DateTime!
  expirationDate: DateTime
  credentialSubject: SecuritySubject! 
  reviewType: Result!
  softwareItemLocation: CID! 
  proof: ProofJWT!
}

##################

################## Endorsement and Dispute Credentials

enum EndorsedResult {
  ENDORSED
  DISPUTED
}

type StatusReason {
  value: String! @string(maxLength: 1000)
  lang: String! @string(maxLength: 2)
}

type ModerationSubject {
  id: StreamID! @documentReference(model: "SoftwareSecurityCredential")
  currentStatus: EndorsedResult!
  statusReason: StatusReason!
}

interface ModerationCredential implements VerifiableCredential  
  @createModel(description: "A verifiable credential interface for moderating software security review credentials") {
  controller: DID! @documentAccount
  issuer: Issuer! 
  context: [String!]! @string(maxLength: 1000) @list(maxLength: 100)
  type: [String!]! @string(maxLength: 1000) @list(maxLength: 100)
  credentialSchema: CredentialSchema!
  credentialStatus: CredentialStatus
  issuanceDate: DateTime!
  expirationDate: DateTime
  credentialSubject: ModerationSubject! 
  reviewType: EndorsedResult!
}

# EIP712 for moderation credentials
# Will require SET accountRelation to review field
## Will require field locking - we don't want the issuer to be able to update the assertions
### Ideally we would have ability to apply filter on reviewType Enum
type ModerationCredential712 implements VerifiableCredential & ModerationCredential & VCEIP712Proof 
  @createModel(accountRelation: LIST, description: "A verifiable credential of type EIP712 for moderating software security review credentials")
  @createIndex(fields: [{ path: "issuanceDate" }]) {
  controller: DID! @documentAccount
  issuer: Issuer! 
  context: [String!]! @string(maxLength: 1000) @list(maxLength: 100)
  type: [String!]! @string(maxLength: 1000) @list(maxLength: 100)
  credentialSchema: CredentialSchema!
  credentialStatus: CredentialStatus
  issuanceDate: DateTime!
  expirationDate: DateTime
  credentialSubject: ModerationSubject! 
  reviewType: EndorsedResult!
  reviewId: StreamID! @documentReference(model: "SoftwareSecurityCredential")
  review: SoftwareSecurityCredential! @relationDocument(property: "reviewId")
  proof: ProofEIP712!
}

# JWT for moderation credentials
# Will require SET accountRelation to review field
## Will require field locking - we don't want the issuer to be able to update the assertions
### Ideally we would have ability to apply filter on reviewType Enum
type ModerationCredentialJWT implements VerifiableCredential & ModerationCredential & VCJWTProof 
  @createModel(accountRelation: LIST, description: "A verifiable credential of type JWT for moderating software security review credentials")
  @createIndex(fields: [{ path: "issuanceDate" }]) {
  controller: DID! @documentAccount
  issuer: Issuer! 
  context: [String!]! @string(maxLength: 1000) @list(maxLength: 100)
  type: [String!]! @string(maxLength: 1000) @list(maxLength: 100)
  credentialSchema: CredentialSchema!
  credentialStatus: CredentialStatus
  issuanceDate: DateTime!
  expirationDate: DateTime
  credentialSubject: ModerationSubject! 
  reviewType: EndorsedResult!
  reviewId: StreamID! @documentReference(model: "SoftwareSecurityCredential")
  review: SoftwareSecurityCredential! @relationDocument(property: "reviewId")
  proof: ProofJWT!
}